#-------------------------------------------------------------------------------
# Name:        module1
# Purpose:
#
# Author:      akhan
#
# Created:     10/06/2015
# Copyright:   (c) akhan 2015
# Licence:     <your licence>
#-------------------------------------------------------------------------------

from time import sleep
import serial

ser = serial.Serial('COM7', 9600) # Establish the connection on a specific port

REF = 0
DOWN = 1
UP = 2
SELECT = 3
HOME = 4
EUP = 7
EDN = 8
CHRG = 6
SHCK = 5

#_sampleMap = [R1, R1, R1, R1, R1, R1, R1, R1, R1, R1, R1]

navigation = {
                'menu': {
                    'comm': [UP, SELECT],
                    'battery': [(2, UP), SELECT],
                    'spo2': [(3,  UP), SELECT],
                    'resp': [(4,  UP), SELECT],
                    'nibp': [(5,  UP), SELECT],
                    'temp': [(6,  UP), SELECT],
                    'hr': [(7, UP), SELECT],
                    'spo2long': [UP, UP, UP, SELECT],
                    'ldsize': [(8, UP), SELECT],
                    'ldsource': [(9, UP), SELECT],
                    'statusqueue': [(10, UP), SELECT],
                    'datetime': [(11, UP), SELECT],
                    'charge':[CHRG]
                        },

                'softkeys': None,

                'defibcontrols':{
                    'charge': [CHRG],
                    'shock': [SHCK],
                    'energydn': [EDN],
                    'energyup': [EUP]
                },

                'patientMode': {
                    'adult': [SELECT, SELECT],
                    'pediatric': [SELECT, DOWN, SELECT],
                    'neonate': [SELECT, UP, SELECT]
                    }
             }



def go_Home():
    """
    Go home by pressing energy up and home button!
    """
    communicate_withArduino(EUP)
    communicate_withArduino(HOME)
    return True

def iter_cmds(commands):
    """
    A convenience fn() to assist in creating lists from a tuple.
    """
    assert isinstance(commands, tuple), "`commands` must be a tuple."
    frq, cmd = commands
    _tmpList = []
    for i in xrange(0, frq):
        _tmpList.append(cmd)
    return _tmpList

def execute_cmd(commands, goHome=False, **kwargs):
    """
    """
    assert isinstance(commands, list), "`commands` must be an array."

    if goHome:
        go_Home()

    try:
        for relay in commands:
            if isinstance(relay, tuple):
                _tmpList = iter_cmds(relay)
                execute_cmd(_tmpList, **kwargs)
            elif relay >= 99:
                print "An error has occured -- unable to find the menu you requested"
                break
            else:
                relay = communicate_withArduino(relay) if relay != 0 else go_Home()

            if relay == 3:
                waitMsec(500)

    except KeyboardInterrupt:
        ser.close()
        print "cleanly closing connection"
    return True

def communicate_withArduino(relay, printRtn=True, btnSpeed=500):
    """
    Communicate withe Arduino.

    Args:
        relay:  the number of the relay you want to toggle.
    """
    assert isinstance(relay, int), \
        "`relay` must be an int, you passed in a {0}".format(type(relay))
    ser.write(chr(relay))
    waitMsec(btnSpeed)
    return ser.readline() if printRtn else None

def waitMsec(msec):
    """
    Sleep msecs.

    Args:
        msec:
    """
    assert isinstance(msec, int), \
        "`msec` must be an int, you passed in a {0}".format(type(msec))
    sleep(msec/1000.0)

def get_commands(top, sub):
    """
    """
    return navigation.get(top, 99).get(sub, 99)



if __name__ == '__main__':
    waitMsec(3000) # wait for the relay board to come up!

    #Execute SLQTP 45.67.1
    # Test all selectable menus


##    execute_cmd(get_commands('menu', 'resp'), goHome=True, btnSpeed=100)
##    execute_cmd(get_commands('menu', 'spo2'), goHome=True)
##    execute_cmd(get_commands('menu', 'hr'), goHome=True)
##    execute_cmd(get_commands('menu', 'battery'), goHome=True)
##    execute_cmd(get_commands('menu','temp'), goHome=True)
##    execute_cmd(get_commands('menu','comm'), goHome=True)
##    execute_cmd(get_commands('menu','nibp'), goHome=True)
##    execute_cmd(get_commands('menu','statusqueue'), goHome=True)
##    execute_cmd(get_commands('menu','ldsize'), goHome=True)
##    execute_cmd(get_commands('menu','ldsource'), goHome=True)
##    execute_cmd(get_commands('menu','datetime'), goHome=True)
##    execute_cmd(cmd.defib.charge)

    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'energydn'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(2500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(2500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(1000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(2500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(2500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(3500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(3500)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(4000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(4000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(4000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(5000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'energyup'))
    execute_cmd(get_commands('defibcontrols', 'charge'))
    waitMsec(7000)
    execute_cmd(get_commands('defibcontrols', 'shock'))
##    execute_cmd(get_commands('defibcontrols','charge')
##    execute_cmd(get_commands('defibcontrols','energydown')


##    # Change patient modes
##  execute_cmd(get_commands('patientMode','pediatric'), goHome=True)
##  execute_cmd(get_commands('patientMode','neonate'), goHome=True)
##  execute_cmd(get_commands('patientMode','adult'), goHome=True)
